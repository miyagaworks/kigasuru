# フェーズ2: システム設計

## プロジェクト概要

**プロジェクト名**: 上手くなる気がするぅぅぅ Pro  
**バージョン**: 1.0  
**作成日**: 2025年9月30日  
**ステータス**: システム設計段階  
**前提条件**: フェーズ1（コンセプト設計）完了

---

## 1. アーキテクチャの設計と選定

### 1.1 システムアーキテクチャ概要

#### 1.1.1 アーキテクチャ方針

**オフライン・ファースト設計**
- すべての機能がオフラインで完結
- データはローカルに永続化
- オンライン接続時のみ同期・バックアップ
- AI機能不使用、ルールベース・統計計算のみ

**シンプル・軽量設計**
- モノリシックアーキテクチャ（過度な分散は避ける）
- 最小限の外部依存
- バッテリー消費最小化
- 高速起動・レスポンス

#### 1.1.2 採用アーキテクチャパターン

**3層アーキテクチャ + オフラインファースト**

```
┌─────────────────────────────────────────┐
│         プレゼンテーション層              │
│  (UI Components / Screens / Navigation) │
├─────────────────────────────────────────┤
│           ビジネスロジック層              │
│  (6次元計算エンジン / 統計分析 / 状態管理)│
├─────────────────────────────────────────┤
│          データアクセス層                │
│     (SQLite / ローカルストレージ)        │
└─────────────────────────────────────────┘
         ↕ (オンライン時のみ)
┌─────────────────────────────────────────┐
│         外部サービス層（オプション）       │
│  (位置情報API / 気象API / バックアップ)  │
└─────────────────────────────────────────┘
```

### 1.2 技術スタック選定

#### 1.2.1 フロントエンド

**React Native 0.74+**
- **選定理由**:
  - iOS/Android単一コードベース
  - 豊富なコミュニティとライブラリ
  - ネイティブパフォーマンス
  - Expo対応でセットアップ簡易化
  - オフライン対応が容易

**TypeScript 5.x**
- **選定理由**:
  - 型安全性による品質向上
  - 開発効率向上（補完機能）
  - リファクタリングの容易さ
  - ドキュメント性の向上

**React Navigation 6.x**
- **選定理由**:
  - React Native標準のナビゲーション
  - タブ・スタック・ドロワーナビゲーション対応
  - ディープリンク対応

**状態管理: Zustand**
- **選定理由**:
  - 軽量（Reduxよりシンプル）
  - TypeScript完全対応
  - ボイラープレート最小
  - 学習コスト低

#### 1.2.2 データ層

**SQLite (expo-sqlite)**
- **選定理由**:
  - オフライン完全対応
  - 高速なローカルデータベース
  - SQL標準による柔軟なクエリ
  - トランザクション対応
  - React Native標準サポート

**AsyncStorage**
- **選定理由**:
  - 設定情報の保存
  - シンプルなKey-Value Store
  - 軽量データ向け

#### 1.2.3 外部サービス（オプション）

**位置情報: expo-location**
- GPS/ジオロケーション取得
- ゴルフ場特定用

**気象情報: OpenWeatherMap API**
- **選定理由**:
  - 無料プラン: 60回/分、100万回/月
  - 気温・天気・風速データ取得
  - 信頼性が高い

**代替案: Yahoo!気象API**
- 日本国内特化
- 精度が高い

**バックアップ: Firebase (Firestore + Authentication)**
- **選定理由**:
  - 無料枠が大きい（1GB storage）
  - オフライン同期対応
  - 認証機能内蔵
  - セットアップ簡易

#### 1.2.4 開発ツール

**Expo 51+**
- 開発環境の簡易化
- OTA（Over-The-Air）アップデート
- ビルド・デプロイ支援

**Jest + React Native Testing Library**
- ユニットテスト
- コンポーネントテスト

**ESLint + Prettier**
- コード品質維持
- フォーマット統一

### 1.3 システム構成図

```
┌──────────────────────────────────────────────────────┐
│                   React Native App                    │
│                                                       │
│  ┌────────────────────────────────────────────────┐  │
│  │         UI Layer (Screens & Components)        │  │
│  │  ┌──────────┐ ┌──────────┐ ┌──────────┐      │  │
│  │  │  Home    │ │  Record  │ │ Analysis │      │  │
│  │  │  Screen  │ │  Screen  │ │  Screen  │ ...  │  │
│  │  └──────────┘ └──────────┘ └──────────┘      │  │
│  └────────────────────────────────────────────────┘  │
│                        ↕                             │
│  ┌────────────────────────────────────────────────┐  │
│  │      State Management (Zustand Stores)        │  │
│  │  - shotStore    - profileStore                │  │
│  │  - settingsStore - analysisStore              │  │
│  └────────────────────────────────────────────────┘  │
│                        ↕                             │
│  ┌────────────────────────────────────────────────┐  │
│  │         Business Logic Layer                  │  │
│  │  ┌──────────────────────────────────────────┐ │  │
│  │  │  6次元計算エンジン (Rule-based)         │ │  │
│  │  │  - 飛距離補正計算                       │ │  │
│  │  │  - 成功率予測（統計）                   │ │  │
│  │  └──────────────────────────────────────────┘ │  │
│  │  ┌──────────────────────────────────────────┐ │  │
│  │  │  統計分析エンジン                       │ │  │
│  │  │  - 頻度分析 / 平均・標準偏差            │ │  │
│  │  │  - 相関分析 / パターン検出              │ │  │
│  │  └──────────────────────────────────────────┘ │  │
│  │  ┌──────────────────────────────────────────┐ │  │
│  │  │  プリセット学習エンジン（頻度ベース）   │ │  │
│  │  └──────────────────────────────────────────┘ │  │
│  └────────────────────────────────────────────────┘  │
│                        ↕                             │
│  ┌────────────────────────────────────────────────┐  │
│  │         Data Access Layer                     │  │
│  │  ┌──────────────────────────────────────────┐ │  │
│  │  │  SQLite Database                        │ │  │
│  │  │  - shots / rounds / profiles            │ │  │
│  │  │  - presets / statistics                 │ │  │
│  │  └──────────────────────────────────────────┘ │  │
│  │  ┌──────────────────────────────────────────┐ │  │
│  │  │  AsyncStorage (設定・キャッシュ)        │ │  │
│  │  └──────────────────────────────────────────┘ │  │
│  └────────────────────────────────────────────────┘  │
│                                                       │
│                   ↕ (オンライン時のみ)                │
│                                                       │
│  ┌────────────────────────────────────────────────┐  │
│  │         External Services (Optional)          │  │
│  │  - GPS (expo-location)                        │  │
│  │  - 気象API (OpenWeatherMap)                   │  │
│  │  - バックアップ (Firebase)                     │  │
│  └────────────────────────────────────────────────┘  │
└──────────────────────────────────────────────────────┘
```

---

## 2. データモデルの設計

### 2.1 エンティティ関係図（ER図）

```
┌─────────────────┐
│    profiles     │ ユーザープロファイル
├─────────────────┤
│ id (PK)         │
│ name            │
│ swing_type      │ スイング特性
│ ball_trajectory │ 球筋傾向
│ distance_type   │ 飛距離タイプ
│ base_distances  │ 7I基準飛距離(JSON)
│ clubs           │ 使用クラブ(JSON)
│ created_at      │
│ updated_at      │
└─────────────────┘
         │ 1
         │
         │ N
┌─────────────────┐
│     rounds      │ ラウンド
├─────────────────┤
│ id (PK)         │
│ profile_id (FK) │
│ course_name     │ ゴルフ場名
│ course_location │ 位置情報(JSON)
│ date            │ 日付
│ weather         │ 天気
│ temperature     │ 気温
│ season          │ 季節(夏/中間/冬)
│ total_score     │ 合計スコア
│ created_at      │
│ updated_at      │
└─────────────────┘
         │ 1
         │
         │ N
┌─────────────────┐
│      shots      │ ショット記録（6次元）
├─────────────────┤
│ id (PK)         │
│ round_id (FK)   │
│ hole_number     │ ホール番号
│ shot_number     │ ショット番号
│                 │
│ === 6次元データ ===
│ slope           │ 傾斜(4方向)
│ club            │ クラブ
│ lie             │ ライ(6段階)
│ strength        │ 強度(3段階)
│ wind            │ 風向き(6段階)
│ season          │ 季節(3段階)
│                 │
│ === 結果データ ===
│ target_distance │ 想定飛距離
│ actual_distance │ 実際飛距離
│ direction       │ 方向(時計方式)
│ success         │ 成功判定
│                 │
│ === オプション ===
│ confidence      │ 自信度
│ target_point    │ 狙った地点
│ feeling         │ 感想
│ pressure        │ プレッシャー度
│                 │
│ created_at      │
└─────────────────┘

┌─────────────────┐
│    presets      │ プリセット（頻度学習）
├─────────────────┤
│ id (PK)         │
│ profile_id (FK) │
│ slope           │
│ club            │
│ lie             │
│ strength        │
│ wind            │
│ season          │
│ usage_count     │ 使用回数
│ last_used_at    │ 最終使用日時
│ created_at      │
└─────────────────┘

┌─────────────────┐
│   statistics    │ 統計データ（集計結果）
├─────────────────┤
│ id (PK)         │
│ profile_id (FK) │
│ stat_type       │ 統計種別
│ dimension       │ 次元(slope/club/lie等)
│ dimension_value │ 値(左足上がり/7I等)
│ success_rate    │ 成功率
│ avg_distance    │ 平均飛距離
│ std_distance    │ 標準偏差
│ sample_count    │ サンプル数
│ updated_at      │
└─────────────────┘
```

### 2.2 テーブル定義詳細

#### 2.2.1 profiles テーブル

```sql
CREATE TABLE profiles (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  swing_type TEXT CHECK(swing_type IN ('right', 'left')),
  swing_tempo TEXT CHECK(swing_tempo IN ('slow', 'normal', 'fast')),
  ball_trajectory TEXT CHECK(ball_trajectory IN ('draw', 'straight', 'fade')),
  distance_type TEXT CHECK(distance_type IN ('distance', 'balance', 'accuracy')),
  
  -- 7I基準飛距離（JSON）
  -- {"summer": 150, "mid": 143, "winter": 135}
  base_distances TEXT NOT NULL,
  
  -- 使用クラブ一覧（JSON配列）
  -- ["DR", "3W", "5W", "U4", "U5", "6I", "7I", "8I", "9I", "PW", "AW", "52", "56", "PT"]
  clubs TEXT NOT NULL,
  
  -- 個人補正ファクター
  head_speed REAL DEFAULT 42.0,
  meet_rate REAL DEFAULT 1.35,
  distance_factor REAL DEFAULT 1.0,
  
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT DEFAULT CURRENT_TIMESTAMP
);
```

#### 2.2.2 rounds テーブル

```sql
CREATE TABLE rounds (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  profile_id INTEGER NOT NULL,
  
  course_name TEXT NOT NULL,
  course_location TEXT, -- JSON: {"lat": 36.xxx, "lng": 140.xxx}
  
  date TEXT NOT NULL, -- ISO 8601: YYYY-MM-DD
  weather TEXT, -- 晴れ、曇り、雨 など
  temperature REAL, -- 気温（℃）
  season TEXT NOT NULL CHECK(season IN ('summer', 'mid', 'winter')),
  
  total_score INTEGER,
  notes TEXT, -- メモ
  
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
  
  FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE
);

CREATE INDEX idx_rounds_profile ON rounds(profile_id);
CREATE INDEX idx_rounds_date ON rounds(date);
```

#### 2.2.3 shots テーブル（6次元データの核心）

```sql
CREATE TABLE shots (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  round_id INTEGER NOT NULL,
  hole_number INTEGER NOT NULL CHECK(hole_number BETWEEN 1 AND 18),
  shot_number INTEGER NOT NULL CHECK(shot_number >= 1),
  
  -- ========== 6次元データ ==========
  
  -- 1. 傾斜
  slope TEXT NOT NULL CHECK(slope IN ('left_up', 'flat', 'left_down', 'right_up')),
  
  -- 2. クラブ
  club TEXT NOT NULL,
  
  -- 3. ライ（6段階）
  lie TEXT NOT NULL CHECK(lie IN ('A', 'B', 'C', 'plugged', 'bare', 'bad')),
  
  -- 4. ショット強度（3段階）
  strength INTEGER NOT NULL CHECK(strength IN (60, 80, 100)),
  
  -- 5. 風向き（6段階）
  wind TEXT NOT NULL CHECK(wind IN ('none', 'against', 'follow', 'left', 'right', 'complex')),
  
  -- 6. 季節（気温条件）
  season TEXT NOT NULL CHECK(season IN ('summer', 'mid', 'winter')),
  
  -- ========== 結果データ ==========
  
  target_distance INTEGER NOT NULL, -- 想定飛距離（ヤード）
  actual_distance INTEGER NOT NULL, -- 実際飛距離（ヤード）
  direction INTEGER NOT NULL CHECK(direction BETWEEN 1 AND 12), -- 時計方式（12時=ターゲット）
  
  distance_error INTEGER, -- 距離誤差（actual - target）
  success BOOLEAN NOT NULL, -- 成功判定（想定±10Y以内かつ方向±1時以内）
  
  -- ========== オプションデータ ==========
  
  confidence TEXT CHECK(confidence IN ('confident', 'normal', 'anxious')), -- 自信度
  target_point TEXT CHECK(target_point IN ('pin', 'center', 'safe')), -- 狙い
  feeling TEXT CHECK(feeling IN ('as_expected', 'unexpected', 'worst')), -- 感想
  pressure TEXT CHECK(pressure IN ('relaxed', 'normal', 'high')), -- プレッシャー
  
  notes TEXT, -- メモ
  
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  
  FOREIGN KEY (round_id) REFERENCES rounds(id) ON DELETE CASCADE
);

-- インデックス（検索高速化）
CREATE INDEX idx_shots_round ON shots(round_id);
CREATE INDEX idx_shots_6dim ON shots(slope, club, lie, strength, wind, season);
CREATE INDEX idx_shots_club ON shots(club);
CREATE INDEX idx_shots_lie ON shots(lie);
CREATE INDEX idx_shots_success ON shots(success);
```

#### 2.2.4 presets テーブル（頻度学習）

```sql
CREATE TABLE presets (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  profile_id INTEGER NOT NULL,
  
  -- 6次元の組み合わせ
  slope TEXT NOT NULL,
  club TEXT NOT NULL,
  lie TEXT NOT NULL,
  strength INTEGER NOT NULL,
  wind TEXT NOT NULL,
  season TEXT NOT NULL,
  
  usage_count INTEGER DEFAULT 1, -- 使用回数
  last_used_at TEXT DEFAULT CURRENT_TIMESTAMP,
  
  created_at TEXT DEFAULT CURRENT_TIMESTAMP,
  
  FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE,
  
  -- 同じ組み合わせは1つだけ
  UNIQUE(profile_id, slope, club, lie, strength, wind, season)
);

CREATE INDEX idx_presets_profile ON presets(profile_id);
CREATE INDEX idx_presets_usage ON presets(usage_count DESC);
```

#### 2.2.5 statistics テーブル（集計結果キャッシュ）

```sql
CREATE TABLE statistics (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  profile_id INTEGER NOT NULL,
  
  stat_type TEXT NOT NULL, -- 'success_rate', 'avg_distance', 'lie_analysis' など
  
  -- 分析対象次元
  dimension TEXT NOT NULL, -- 'slope', 'club', 'lie', 'wind', 'season', 'combined' など
  dimension_value TEXT NOT NULL, -- '7I', 'left_up', 'C' など（JSONで複合条件も可）
  
  -- 統計値
  success_rate REAL, -- 成功率
  avg_distance REAL, -- 平均飛距離
  std_distance REAL, -- 標準偏差
  sample_count INTEGER NOT NULL, -- サンプル数
  
  -- その他統計値（JSON）
  additional_stats TEXT,
  
  updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
  
  FOREIGN KEY (profile_id) REFERENCES profiles(id) ON DELETE CASCADE,
  
  UNIQUE(profile_id, stat_type, dimension, dimension_value)
);

CREATE INDEX idx_stats_profile ON statistics(profile_id);
CREATE INDEX idx_stats_type ON statistics(stat_type);
CREATE INDEX idx_stats_dimension ON statistics(dimension, dimension_value);
```

### 2.3 データ整合性とバリデーション

#### 2.3.1 制約ルール

**必須制約**
- すべてのショットは必ずラウンドに紐づく
- 6次元データはすべて必須入力
- 結果データ（距離・方向）は必須

**整合性制約**
- ラウンド削除時、紐づくショットも削除（CASCADE）
- プロファイル削除時、すべての関連データ削除（CASCADE）

**値制約**
- ENUMによる選択肢制限（slope, lie, wind等）
- CHECK制約による範囲制限（hole_number, direction等）

#### 2.3.2 データバリデーション

**アプリケーション層でのバリデーション**
```typescript
// ショットデータのバリデーション
interface ShotValidation {
  slope: 'left_up' | 'flat' | 'left_down' | 'right_up';
  club: string; // プロファイルのclubs配列に存在すること
  lie: 'A' | 'B' | 'C' | 'plugged' | 'bare' | 'bad';
  strength: 60 | 80 | 100;
  wind: 'none' | 'against' | 'follow' | 'left' | 'right' | 'complex';
  season: 'summer' | 'mid' | 'winter';
  target_distance: number; // > 0
  actual_distance: number; // >= 0
  direction: number; // 1-12
}

// バリデーション関数
function validateShot(shot: Partial<ShotValidation>): boolean {
  // 6次元すべて入力されているか
  // 値が正しい範囲内か
  // ...
}
```

---

## 3. コンポーネント間の関係定義

### 3.1 アプリケーション構造

```
src/
├── components/          # 再利用可能なUIコンポーネント
│   ├── common/         # 汎用コンポーネント
│   ├── input/          # 入力系コンポーネント
│   └── analysis/       # 分析系コンポーネント
├── screens/            # 画面コンポーネント
│   ├── Home/
│   ├── Record/
│   ├── Analysis/
│   └── Settings/
├── stores/             # 状態管理（Zustand）
│   ├── shotStore.ts
│   ├── profileStore.ts
│   └── settingsStore.ts
├── services/           # ビジネスロジック
│   ├── database/       # データベース操作
│   ├── calculation/    # 6次元計算エンジン
│   ├── statistics/     # 統計分析
│   └── preset/         # プリセット学習
├── utils/              # ユーティリティ
├── types/              # TypeScript型定義
├── constants/          # 定数定義
└── navigation/         # ナビゲーション設定
```

### 3.2 主要コンポーネント定義

#### 3.2.1 画面コンポーネント

**HomeScreen（ホーム画面）**
- 役割: ダッシュボード、クイックアクセス
- 依存: profileStore, shotStore
- 表示内容:
  - 最近のラウンド
  - クイックスタート
  - 統計サマリー

**RecordScreen（記録画面）**
- 役割: ショット記録の入力
- 依存: shotStore, presetStore
- サブコンポーネント:
  - SlopeSelector: 傾斜選択
  - ClubSelector: クラブ選択
  - LieSelector: ライ選択
  - StrengthSelector: 強度選択
  - WindSelector: 風向き選択
  - TargetBoard: 結果入力

**AnalysisScreen（分析画面）**
- 役割: データ分析・可視化
- 依存: statisticsStore, shotStore
- サブコンポーネント:
  - SuccessRateChart: 成功率グラフ
  - LieAnalysis: ライ別分析
  - ClubPerformance: クラブ別成績

**SettingsScreen（設定画面）**
- 役割: プロファイル管理、アプリ設定
- 依存: profileStore, settingsStore

#### 3.2.2 ビジネスロジックコンポーネント

**CalculationEngine（6次元計算エンジン）**
```typescript
class CalculationEngine {
  // 想定飛距離計算（6次元補正）
  calculateTargetDistance(params: {
    baseDistance: number;  // 基準距離
    slope: string;
    lie: string;
    strength: number;
    wind: string;
    season: string;
  }): number;
  
  // 成功判定
  isSuccess(
    targetDistance: number,
    actualDistance: number,
    direction: number
  ): boolean;
  
  // 補正係数取得
  getCorrectionFactor(
    dimension: string,
    value: string
  ): number;
}
```

**StatisticsEngine（統計分析エンジン）**
```typescript
class StatisticsEngine {
  // 成功率計算
  calculateSuccessRate(shots: Shot[]): number;
  
  // 平均・標準偏差
  calculateStats(distances: number[]): {
    mean: number;
    std: number;
  };
  
  // ライ別分析
  analyzeLiePerformance(shots: Shot[]): LieStats[];
  
  // パターン検出（頻度分析）
  detectPatterns(shots: Shot[]): Pattern[];
  
  // 相関分析
  calculateCorrelation(
    dimension1: string,
    dimension2: string,
    shots: Shot[]
  ): number;
}
```

**PresetLearningEngine（プリセット学習エンジン）**
```typescript
class PresetLearningEngine {
  // プリセット記録
  recordUsage(combination: SixDimensionCombo): void;
  
  // TOP5取得（頻度順）
  getTopPresets(limit: number): Preset[];
  
  // コース別頻出パターン
  getCoursePatterns(courseName: string): Preset[];
}
```

### 3.3 データフロー図

```
┌─────────────┐
│ UI (Screen) │
└──────┬──────┘
       │ ユーザー操作
       ↓
┌─────────────┐
│   Store     │ 状態管理（Zustand）
│ (shotStore) │
└──────┬──────┘
       │ ビジネスロジック呼び出し
       ↓
┌──────────────────────┐
│  Business Logic      │
│ - CalculationEngine  │ 6次元計算
│ - StatisticsEngine   │ 統計分析
│ - PresetLearning     │ プリセット学習
└──────┬───────────────┘
       │ データ永続化
       ↓
┌──────────────────────┐
│  Data Access Layer   │
│ - DatabaseService    │ SQLite操作
│ - StorageService     │ AsyncStorage
└──────────────────────┘
```

### 3.4 状態管理設計（Zustand）

#### 3.4.1 shotStore（ショット管理）

```typescript
interface ShotStore {
  // 状態
  currentRound: Round | null;
  currentShot: Partial<Shot>;
  recentShots: Shot[];
  
  // アクション
  startRound: (round: Round) => void;
  endRound: () => void;
  
  createShot: (shot: Shot) => Promise<void>;
  updateShot: (id: number, shot: Partial<Shot>) => Promise<void>;
  deleteShot: (id: number) => Promise<void>;
  
  loadRecentShots: () => Promise<void>;
  
  // 入力中のショットデータ更新
  setCurrentShot: (data: Partial<Shot>) => void;
  resetCurrentShot: () => void;
}
```

#### 3.4.2 profileStore（プロファイル管理）

```typescript
interface ProfileStore {
  // 状態
  currentProfile: Profile | null;
  profiles: Profile[];
  
  // アクション
  loadProfiles: () => Promise<void>;
  selectProfile: (id: number) => Promise<void>;
  createProfile: (profile: Profile) => Promise<void>;
  updateProfile: (id: number, profile: Partial<Profile>) => Promise<void>;
  deleteProfile: (id: number) => Promise<void>;
  
  // 飛距離計算
  getClubDistance: (club: string, season: string, strength: number) => number;
}
```

#### 3.4.3 presetStore（プリセット管理）

```typescript
interface PresetStore {
  // 状態
  topPresets: Preset[];
  coursePresets: Map<string, Preset[]>;
  
  // アクション
  loadTopPresets: (limit?: number) => Promise<void>;
  recordUsage: (combination: SixDimensionCombo) => Promise<void>;
  getCoursePresets: (courseName: string) => Promise<Preset[]>;
}
```

#### 3.4.4 statisticsStore（統計管理）

```typescript
interface StatisticsStore {
  // 状態
  statistics: Statistics[];
  loading: boolean;
  
  // アクション
  calculateStatistics: () => Promise<void>;
  getSuccessRate: (dimension: string, value: string) => number;
  getLieAnalysis: () => Promise<LieStats[]>;
  getClubPerformance: () => Promise<ClubStats[]>;
  
  // キャッシュ更新
  refreshCache: () => Promise<void>;
}
```

#### 3.4.5 settingsStore（設定管理）

```typescript
interface SettingsStore {
  // 状態
  settings: AppSettings;
  
  // アクション
  loadSettings: () => Promise<void>;
  updateSettings: (settings: Partial<AppSettings>) => Promise<void>;
  
  // GPS・気象設定
  enableGPS: boolean;
  enableWeatherAPI: boolean;
  
  // 表示設定
  theme: 'light' | 'dark' | 'auto';
  language: 'ja' | 'en';
}
```

---

## 4. セキュリティとスケーラビリティの設計

### 4.1 セキュリティ設計

#### 4.1.1 データ保護

**ローカルデータの保護**
- SQLiteデータベースの暗号化検討（expo-sqlite-encryption）
- センシティブデータなし（個人識別情報は名前のみ）
- デバイス紛失時のリスク: 低（ゴルフデータのみ）

**AsyncStorageのセキュリティ**
- 設定情報のみ保存
- 暗号化不要（機密性低）

#### 4.1.2 API通信のセキュリティ

**位置情報API**
- HTTPS通信のみ
- APIキーの環境変数管理
- レート制限遵守

**気象API**
- APIキーのローテーション検討
- エラーハンドリング徹底

**Firebase（オプション）**
- Firebase Authentication使用
- Firestore Security Rules設定
- ユーザーは自分のデータのみアクセス可能

```javascript
// Firestore Security Rules例
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
```

#### 4.1.3 入力バリデーション

**SQL Injection対策**
- プリペアドステートメント使用
- パラメータバインディング徹底

```typescript
// 安全なクエリ例
db.executeSql(
  'INSERT INTO shots (round_id, club, lie) VALUES (?, ?, ?)',
  [roundId, club, lie]
);
```

**XSS対策**
- React Nativeは基本的に安全（仮想DOM）
- WebView使用時は注意（現時点で不使用）

#### 4.1.4 権限管理

**最小権限の原則**
- 必要な権限のみリクエスト
  - GPS: オプション（手動入力可能）
  - インターネット: オプション（オフライン動作）
  - ストレージ: データ保存に必要

**権限リクエストのタイミング**
- 初回起動時に一括リクエストしない
- 機能使用時に動的リクエスト
- 拒否された場合の代替手段提供

### 4.2 スケーラビリティ設計

#### 4.2.1 データ量の想定

**ユーザーあたりのデータ増加**
```
1ラウンド = 約70-100ショット
1年間 = 50ラウンド（週1回ペース）
→ 1年で約3,500-5,000ショット

5年間使用想定:
- ショット: 約17,500-25,000件
- ラウンド: 約250件
- プリセット: 約50-100件
- 統計: 約500-1,000件

合計データ量: 約10-20MB（テキストデータ）
```

**SQLiteの限界**
- 理論上の最大DB容量: 281TB
- 実用的な容量: 数GB
- 本アプリ想定: 10-20MB（5年間）
→ スケーラビリティ問題なし

#### 4.2.2 パフォーマンス最適化

**データベース最適化**
```sql
-- 適切なインデックス作成（既に定義済み）
CREATE INDEX idx_shots_6dim ON shots(slope, club, lie, strength, wind, season);
CREATE INDEX idx_shots_round ON shots(round_id);

-- クエリ最適化例
-- 悪い例: 全件取得後フィルタ
SELECT * FROM shots WHERE club = '7I';

-- 良い例: インデックス活用
SELECT * FROM shots 
WHERE club = '7I' 
  AND round_id = ?
LIMIT 100;
```

**統計データのキャッシュ**
- 頻繁にアクセスする統計はstatisticsテーブルにキャッシュ
- ショット追加時に非同期で更新
- キャッシュヒット率: 90%以上を目標

```typescript
// 統計キャッシュの更新戦略
class StatisticsCache {
  async updateOnShotAdded(shot: Shot): Promise<void> {
    // 非同期でキャッシュ更新
    this.queueUpdate({
      type: 'club',
      value: shot.club,
    });
    
    this.queueUpdate({
      type: 'lie',
      value: shot.lie,
    });
    
    // バッチ処理で一括更新
    await this.flushQueue();
  }
}
```

**メモリ管理**
- 大量データの一括読み込み回避
- ページネーション実装（100件ずつ）
- 使用していない画面のメモリ解放

```typescript
// ページネーション例
async function loadShots(page: number, pageSize: number = 100): Promise<Shot[]> {
  const offset = (page - 1) * pageSize;
  return db.executeSql(
    'SELECT * FROM shots ORDER BY created_at DESC LIMIT ? OFFSET ?',
    [pageSize, offset]
  );
}
```

#### 4.2.3 UI/UXのパフォーマンス

**レンダリング最適化**
- React.memo使用（不要な再レンダリング防止）
- useCallbackでコールバック最適化
- FlatList使用（長いリストの仮想化）

```typescript
// 最適化例
const ShotListItem = React.memo(({ shot }: { shot: Shot }) => {
  return <View>...</View>;
});

const ShotList = () => {
  return (
    <FlatList
      data={shots}
      renderItem={({ item }) => <ShotListItem shot={item} />}
      keyExtractor={(item) => item.id.toString()}
      windowSize={10} // 表示範囲外のアイテムは非レンダリング
    />
  );
};
```

**画像・アセットの最適化**
- SVGアイコン使用（軽量）
- 画像の遅延読み込み
- アプリバンドルサイズ最小化

#### 4.2.4 オフライン同期戦略

**同期タイミング**
- バックグラウンド同期（アプリ起動時）
- Wi-Fi接続時のみ自動同期（設定可能）
- 手動同期オプション

**競合解決**
- Last Write Wins（最終書き込み優先）
- タイムスタンプベース
- 本アプリでは競合リスク低（単一ユーザー）

```typescript
// 同期処理の概要
class SyncService {
  async syncToCloud(): Promise<void> {
    if (!this.isOnline() || !this.isWiFi()) {
      return;
    }
    
    // ローカルの未同期データを取得
    const unsyncedData = await this.getUnsyncedData();
    
    // クラウドにアップロード
    for (const item of unsyncedData) {
      await this.uploadToFirebase(item);
      await this.markAsSynced(item.id);
    }
  }
  
  async syncFromCloud(): Promise<void> {
    // クラウドから最新データ取得
    const cloudData = await this.downloadFromFirebase();
    
    // ローカルと比較してマージ
    await this.mergeData(cloudData);
  }
}
```

#### 4.2.5 将来の拡張性

**モジュール化設計**
- 各機能を独立したモジュールとして設計
- 新機能追加時の影響範囲最小化

**API抽象化**
```typescript
// データベース抽象化インターフェース
interface IDataService {
  createShot(shot: Shot): Promise<void>;
  getShots(filter: ShotFilter): Promise<Shot[]>;
  updateShot(id: number, shot: Partial<Shot>): Promise<void>;
  deleteShot(id: number): Promise<void>;
}

// SQLite実装
class SQLiteDataService implements IDataService {
  // 実装...
}

// 将来的にFirebase等に切り替え可能
class FirebaseDataService implements IDataService {
  // 実装...
}
```

**設定による機能切り替え**
```typescript
// フィーチャーフラグ
const FEATURES = {
  GPS_AUTO_DETECTION: true,
  WEATHER_API: true,
  CLOUD_BACKUP: false, // 将来実装
  SOCIAL_SHARING: false, // 将来実装
  AI_ANALYSIS: false, // 非対応（永続的にfalse）
};
```

---

## 5. 技術的制約と対応策

### 5.1 制約事項

#### 5.1.1 プラットフォーム制約

**iOS制約**
- バックグラウンド処理の制限
  - 対応: フォアグラウンドでの同期推奨
- GPS精度の変動
  - 対応: 手動ゴルフ場選択機能

**Android制約**
- デバイスの多様性（画面サイズ・性能）
  - 対応: レスポンシブデザイン
- バッテリー最適化による制限
  - 対応: GPS間欠利用

#### 5.1.2 技術的制約

**SQLiteの制約**
- 同時書き込み制限（単一ライター）
  - 影響: 低（単一ユーザーアプリ）
  - 対応: トランザクション管理徹底

**React Nativeの制約**
- ネイティブモジュールへのアクセス制限
  - 対応: expo-moduleで解決
- 複雑なアニメーション性能
  - 対応: シンプルなUI設計

#### 5.1.3 外部API制約

**OpenWeatherMap無料プラン**
- 制限: 60回/分、100万回/月
- 対応: 
  - ラウンド開始時1回のみ取得
  - ローカルキャッシュ活用
  - レート制限エラーハンドリング

**GPS精度**
- 制限: ゴルフ場によって精度が異なる
- 対応:
  - 主要ゴルフ場DBを事前登録
  - 手動選択機能
  - 位置情報キャッシュ

### 5.2 リスク対応

#### 5.2.1 データ損失リスク

**対応策**
- 自動ローカルバックアップ（週次）
- オプションでクラウドバックアップ
- エクスポート機能（JSON/CSV）

```typescript
// バックアップ機能
class BackupService {
  async createBackup(): Promise<string> {
    const data = {
      profiles: await db.getAllProfiles(),
      rounds: await db.getAllRounds(),
      shots: await db.getAllShots(),
      presets: await db.getAllPresets(),
      exportDate: new Date().toISOString(),
      version: '1.0',
    };
    
    return JSON.stringify(data);
  }
  
  async restoreBackup(backupJson: string): Promise<void> {
    const data = JSON.parse(backupJson);
    // データ復元処理
  }
}
```

#### 5.2.2 パフォーマンス劣化リスク

**対応策**
- 定期的なデータベース最適化
- 古いデータのアーカイブ機能（オプション）
- パフォーマンスモニタリング

```typescript
// DB最適化
async function optimizeDatabase(): Promise<void> {
  await db.executeSql('VACUUM'); // 不要領域回収
  await db.executeSql('ANALYZE'); // 統計情報更新
}
```

#### 5.2.3 互換性問題リスク

**対応策**
- データベーススキーマのバージョン管理
- マイグレーション機能実装
- 最低サポートバージョンの明確化

```typescript
// マイグレーション例
const migrations = [
  {
    version: 1,
    up: async (db: Database) => {
      await db.executeSql('CREATE TABLE profiles (...)');
    },
  },
  {
    version: 2,
    up: async (db: Database) => {
      await db.executeSql('ALTER TABLE shots ADD COLUMN notes TEXT');
    },
  },
];

async function migrateDatabase(db: Database): Promise<void> {
  const currentVersion = await getCurrentVersion(db);
  
  for (const migration of migrations) {
    if (migration.version > currentVersion) {
      await migration.up(db);
      await updateVersion(db, migration.version);
    }
  }
}
```

---

## 6. 開発ガイドライン

### 6.1 コーディング規約

#### 6.1.1 TypeScript規約

**命名規則**
- コンポーネント: PascalCase（例: `ShotRecordScreen`）
- 関数: camelCase（例: `calculateDistance`）
- 定数: UPPER_SNAKE_CASE（例: `MAX_SHOTS_PER_ROUND`）
- インターフェース: PascalCase + I接頭辞（例: `IDataService`）

**型定義**
- any型の使用禁止
- すべての関数に戻り値の型指定
- PropTypesよりTypeScript型を優先

```typescript
// 良い例
interface ShotProps {
  shot: Shot;
  onPress: (id: number) => void;
}

const ShotItem: React.FC<ShotProps> = ({ shot, onPress }) => {
  return <TouchableOpacity onPress={() => onPress(shot.id)}>...</TouchableOpacity>;
};

// 悪い例
const ShotItem = (props: any) => {
  return <TouchableOpacity onPress={() => props.onPress(props.shot.id)}>...</TouchableOpacity>;
};
```

#### 6.1.2 React Native規約

**コンポーネント設計**
- 関数コンポーネント優先
- Hooksの活用
- 単一責任の原則

**ファイル構成**
```
components/
├── ShotItem/
│   ├── index.tsx          # メインコンポーネント
│   ├── ShotItem.styles.ts # スタイル定義
│   ├── ShotItem.test.tsx  # テスト
│   └── types.ts           # 型定義
```

#### 6.1.3 データベース規約

**クエリ命名**
- 動詞 + 名詞形式（例: `getShots`, `createRound`）
- 明確な意図を表す名前

**トランザクション管理**
- 複数操作は必ずトランザクション内で実行
- エラーハンドリング徹底

```typescript
async function createRoundWithShots(
  round: Round,
  shots: Shot[]
): Promise<void> {
  await db.transaction(async (tx) => {
    try {
      const roundId = await tx.createRound(round);
      
      for (const shot of shots) {
        await tx.createShot({ ...shot, round_id: roundId });
      }
    } catch (error) {
      // トランザクション自動ロールバック
      throw error;
    }
  });
}
```

### 6.2 テスト戦略

#### 6.2.1 テストピラミッド

```
       /\
      /  \     E2E Tests (少数)
     /────\    
    /      \   Integration Tests (中程度)
   /────────\  
  /          \ Unit Tests (多数)
 /────────────\
```

**単体テスト（Unit Tests）**
- カバレッジ目標: 80%以上
- 対象:
  - ビジネスロジック（計算エンジン、統計）
  - ユーティリティ関数
  - ストアのアクション

```typescript
// 単体テスト例
describe('CalculationEngine', () => {
  it('should calculate target distance with all corrections', () => {
    const engine = new CalculationEngine();
    const result = engine.calculateTargetDistance({
      baseDistance: 150,
      slope: 'left_up',
      lie: 'C',
      strength: 80,
      wind: 'against',
      season: 'winter',
    });
    
    expect(result).toBe(94); // 期待値
  });
});
```

**統合テスト（Integration Tests）**
- 対象:
  - データベース操作
  - ストアとサービスの連携

**E2Eテスト（End-to-End Tests）**
- Detox使用
- 主要フロー検証:
  - ラウンド開始→ショット記録→分析表示

### 6.3 エラーハンドリング

#### 6.3.1 エラー分類

**ユーザーエラー**
- 入力バリデーションエラー
- 対応: フォームエラーメッセージ表示

**システムエラー**
- データベースエラー
- ネットワークエラー
- 対応: ユーザーに分かりやすいメッセージ表示 + ログ記録

**クリティカルエラー**
- アプリクラッシュ
- 対応: エラーバウンダリ + クラッシュレポート（Sentryなど）

```typescript
// エラーハンドリング例
class AppError extends Error {
  constructor(
    message: string,
    public code: string,
    public userMessage: string
  ) {
    super(message);
  }
}

async function saveShot(shot: Shot): Promise<void> {
  try {
    await db.createShot(shot);
  } catch (error) {
    if (error instanceof SQLError) {
      throw new AppError(
        `Database error: ${error.message}`,
        'DB_ERROR',
        'データの保存に失敗しました。もう一度お試しください。'
      );
    }
    throw error;
  }
}
```

---

## 7. 次のステップ

### 7.1 システム設計の確定事項

以下の設計が完了しました：

✅ アーキテクチャの選定（オフラインファースト3層アーキテクチャ）
✅ 技術スタックの決定（React Native + TypeScript + SQLite）
✅ データモデルの詳細設計（5テーブル + ER図）
✅ コンポーネント設計（画面・ロジック・ストア）
✅ セキュリティ設計（データ保護・API通信）
✅ スケーラビリティ設計（パフォーマンス最適化）

### 7.2 フィードバックポイント

**確認いただきたい事項**：

- [ ] 採用技術スタックは適切か？（React Native + TypeScript + SQLite）
- [ ] データベーススキーマは6次元要件を満たしているか？
- [ ] オフラインファースト設計で問題ないか？
- [ ] セキュリティ対策は十分か？

### 7.3 次フェーズへの移行条件

以下が確定したら、**フェーズ3: 開発準備**に進みます：

- システムアーキテクチャの承認
- データモデルの承認
- 技術スタックの承認
- 開発ガイドラインの合意

---

## 変更履歴

| 日付 | バージョン | 変更内容 | 担当者 |
|------|-----------|---------|--------|
| 2025-09-30 | 1.0 | 初版作成 | Claude |

---

## 承認

| 役割 | 氏名 | 承認日 | サイン |
|------|------|--------|--------|
| プロジェクトオーナー | | | |
| システムアーキテクト | | | |
| 技術リード | | | |